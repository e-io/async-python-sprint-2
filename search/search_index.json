{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u041f\u0440\u043e\u0435\u043a\u0442\u043d\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u043f\u0440\u0438\u043d\u0442\u0430","text":"<p>\u0421\u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u0442\u0443\u043f\u0430\u044e\u0449\u0438\u0445 \u0437\u0430\u0434\u0430\u0447.</p>"},{"location":"#_2","title":"\u0422\u043e\u043c\u0443, \u043a\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u044d\u0442\u043e \u0447\u0438\u0442\u0430\u0442\u044c","text":""},{"location":"#_3","title":"\u0414\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430","text":"<p>\u0412\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043e \u043d\u0430 \u044d\u0442\u043e\u0439 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0435. </p>"},{"location":"#_4","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f","text":"<p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0443 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0430 MkDocs.</p> <ul> <li> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043e\u043d\u043b\u0430\u0439\u043d: e-io.github.io/async-python-sprint-2</p> </li> <li> <p>\u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043e\u0444\u043b\u0430\u0439\u043d:</p> <ul> <li>\u043a\u0430\u043a \u0441\u0430\u0439\u0442 - \u043e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 <code>site/index.html</code></li> <li>\u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b markdown - \u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u043f\u0430\u043f\u043a\u0443 <code>docs/</code></li> </ul> </li> </ul> <p>\u0422\u0430\u043a\u0436\u0435 \u0441\u0430\u0439\u0442 \u043c\u043e\u0436\u0435\u0442 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \"\u043d\u0430 \u043b\u0435\u0442\u0443\" \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b <pre><code>mkdocs serve  \n</code></pre></p>"},{"location":"#_5","title":"\u041b\u0438\u0447\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0443\u0442\u044b\u0435 \u0432 \u0445\u043e\u0434\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u0434 \u044d\u0442\u0438\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c:","text":"<ul> <li>\u0412\u043f\u0435\u0440\u0432\u044b\u0435 \u0432 \u0436\u0438\u0437\u043d\u0438 \u044f \u043f\u0438\u0441\u0430\u043b \u0442\u0435\u0441\u0442\u044b \u043d\u0430 \u043a\u0430\u043a\u043e\u043c-\u043b\u0438\u0431\u043e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0435 (<code>pytest</code>). \u0414\u043e \u044d\u0442\u043e\u0433\u043e \u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b py-\u0442\u0435\u0441\u0442\u044b \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0434\u0440\u0443\u0433\u0438\u043c\u0438. </li> <li>\u0412\u043f\u0435\u0440\u0432\u044b\u0435 \u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440. \u042f \u0434\u0430\u0432\u043d\u043e \u0434\u0443\u043c\u0430\u043b \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u0433\u0435\u043d\u0435\u0440\u0438\u0442\u044c \u0444\u0430\u0439\u043b\u044b \u0441 docstring'\u0430\u043c\u0438, \u043d\u043e \u043d\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u043b \u043a\u0430\u043a \u044d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c. </li> <li>\u0410 \u0442\u0443\u0442 \u043d\u0430\u0448\u0451\u043b <code>mkdocs</code> \u0438 \u0441\u0433\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043b \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0441\u0430\u0439\u0442-\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043d\u0430 github pages. </li> </ul> <p>\u0422\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u044f \u0436\u0438\u0437\u043d\u044c \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 '\u0434\u043e' \u0438 '\u043f\u043e\u0441\u043b\u0435'. \u041e\u0447\u0435\u043d\u044c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e \u043c\u043d\u0435\u043d\u0438\u0435 \u0441\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u043e\u0431 \u044d\u0442\u0438\u0445 \u0434\u0432\u0443\u0445 \u043f\u0440\u043e\u0431\u0430\u0445 \u043f\u0435\u0440\u0430.</p> <p>\u0410 \u0442\u0430\u043a\u0436\u0435:</p> <ul> <li>\u0412\u043f\u0435\u0440\u0432\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u044b. </li> <li>\u0412\u043f\u0435\u0440\u0432\u044b\u0435 \u0441\u0434\u0435\u043b\u0430\u043b \u0431\u044d\u043a\u0430\u043f\u044b \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432, \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u044b\u0435 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\u0441\u044f \u0445\u043e\u0442\u044c \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0430. \u0412 \u0447\u0430\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0432\u043f\u0435\u0440\u0432\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b \u0444\u0443\u043d\u043a\u0446\u0438\u044e pickle.</li> </ul>"},{"location":"#_6","title":"\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435","text":"<p>\u0412 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u044f \u043d\u0435 \u0443\u0441\u043f\u0435\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 Job \u0438 Schedule.  \u041e\u0434\u043d\u0430\u043a\u043e \u0441\u0434\u0435\u043b\u0430\u043b \u0432\u0441\u0435 \u043d\u0443\u0436\u043d\u044b\u0435 \u0437\u0430\u0433\u043b\u0443\u0448\u043a\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u044d\u0442\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0432 \u0431\u044d\u043a\u0430\u043f-\u0444\u0430\u0439\u043b \u0438 \u043f\u043e\u043b\u043d\u043e\u0435 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u044d\u0442\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043f\u0440\u0438 \u0440\u0435\u0441\u0442\u0430\u0440\u0442\u0435.</p>"},{"location":"#_7","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>1. \u041e\u043f\u0438\u0441\u0430\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043a\u043b\u0430\u0441\u0441\u0430 <code>Scheduler</code>.</p> <p>\u0423\u0441\u043b\u043e\u0432\u0438\u044f \u0438 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:</p> <ul> <li>\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0434\u043e 10 \u0437\u0430\u0434\u0430\u0447 (\u0434\u0435\u0444\u043e\u043b\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043e).</li> <li>\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a \u0438 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0435\u0451 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a\u0430 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0432 \u0437\u0430\u0434\u0430\u0447\u0435.</li> <li>\u041f\u0440\u0438 \u0448\u0442\u0430\u0442\u043d\u043e\u043c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0445 \u0438 \u043e\u0436\u0438\u0434\u0430\u044e\u0449\u0438\u0445 \u0437\u0430\u0434\u0430\u0447.</li> <li>\u041f\u043e\u0441\u043b\u0435 \u0440\u0435\u0441\u0442\u0430\u0440\u0442\u0430 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u044e\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f.</li> </ul> <p>2. \u041e\u043f\u0438\u0441\u0430\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043a\u043b\u0430\u0441\u0441\u0430 <code>Job</code>.</p> <p>\u0423\u0441\u043b\u043e\u0432\u0438\u044f \u0438 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:</p> <ul> <li>\u0423 \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0430 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440). \u0415\u0441\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0443\u043a\u0430\u0437\u0430\u043d, \u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0430 \u043f\u0440\u0435\u043a\u0440\u0430\u0449\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f, \u0435\u0441\u043b\u0438 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0432\u044b\u0441\u0438\u043b\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440.</li> <li>\u0423 \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440). \u0415\u0441\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0443\u043a\u0430\u0437\u0430\u043d, \u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0430 \u0441\u0442\u0430\u0440\u0442\u0443\u0435\u0442 \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043f\u0435\u0440\u0438\u043e\u0434.</li> <li>\u0423 \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0441\u0442\u0430\u0440\u0442\u043e\u0432 (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440). \u0415\u0441\u043b\u0438 \u0432 \u0445\u043e\u0434\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u0451\u043b \u0441\u0431\u043e\u0439 \u0438\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0438-\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043d\u0435 \u0431\u044b\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b, \u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0449\u0435\u043d\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437. \u0415\u0441\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d, \u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u0430\u0440\u0442\u043e\u0432 \u0440\u0430\u0432\u043d\u043e 0.</li> <li>\u0423 \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u044b \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u2014 \u0437\u0430\u0434\u0430\u0447\u0430 \u0438\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0438, \u043e\u0442 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u0435\u0451 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440). \u0415\u0441\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0443\u043a\u0430\u0437\u0430\u043d, \u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0430 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0430\u0442\u044c \u0434\u043e \u043c\u043e\u043c\u0435\u043d\u0442\u0430, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u044b \u0437\u0430\u0434\u0430\u0447\u0438-\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438.</li> </ul> <p>3. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a\u0430 \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430\u0445.</p> <p>\u0423\u0441\u043b\u043e\u0432\u0438\u044f \u0438 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:</p> <ul> <li>\u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439: \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0439 \u0438 \u0444\u0430\u0439\u043b\u043e\u0432;</li> <li>\u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438: \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435, \u0447\u0442\u0435\u043d\u0438\u0435, \u0437\u0430\u043f\u0438\u0441\u044c;</li> <li>\u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u0435\u0442\u044c\u044e: \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u0441\u044b\u043b\u043e\u043a (GET-\u0437\u0430\u043f\u0440\u043e\u0441\u044b) \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430;</li> <li>\u043e\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0438\u0437 3 \u0437\u0430\u0434\u0430\u0447, \u0437\u0430\u0432\u0438\u0441\u044f\u0449\u0438\u0445 \u0434\u0440\u0443\u0433 \u043e\u0442 \u0434\u0440\u0443\u0433\u0430 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0440\u0443\u0433 \u0437\u0430 \u0434\u0440\u0443\u0433\u043e\u043c.</li> </ul>"},{"location":"#_8","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u0440\u0435\u0448\u0435\u043d\u0438\u044e","text":"<ol> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u044b \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u044b, \u0438\u0437\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0432 \u0442\u0435\u043e\u0440\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438.</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u043d\u0435 \u0437\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043e.</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>asyncio</code> \u0437\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043e.</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u043c\u043e\u0434\u0443\u043b\u0438 \u044f\u0437\u044b\u043a\u0430.</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438 \u041e\u041e\u041f.</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044e \u0442\u0438\u043f\u043e\u0432.</li> <li>\u041b\u043e\u0433\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439.</li> <li>\u041f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0439.</li> <li>\u041f\u0440\u0438\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0438\u043b\u044c \u043a\u043e\u0434\u0430 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 pep8, flake8, mypy.</li> </ol>"},{"location":"#_9","title":"\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u043a \u0440\u0435\u0448\u0435\u043d\u0438\u044e","text":"<ol> <li>\u041f\u043e\u043a\u0440\u043e\u0439\u0442\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u0434 \u0442\u0435\u0441\u0442\u0430\u043c\u0438.</li> <li>\u0414\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0437\u0430\u0434\u0430\u0447 \u0438\u043b\u0438 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 <code>.lock</code>-\u0444\u0430\u0439\u043b\u044b \u0438 \u0438\u043d\u044b\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u044b \u2014 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>txt</code> \u0438\u043b\u0438 <code>json</code>.</li> <li>\u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447 \u0438/\u0438\u043b\u0438 \u0438\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0439 \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435\u043c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f <code>uid</code> \u0438\u043b\u0438 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 \u0448\u0430\u0431\u043b\u043e\u043d. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0441\u044b\u043b\u043e\u043a (<code>symlink</code>) \u043d\u0435 \u0437\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043e.</li> <li>\u0421\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u0430 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0430 \u043f\u043e\u0434 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435. \u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u043d\u0435 \u0437\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043e.</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u044b \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Timer \u0438\u043b\u0438 Condition.</li> <li>\u041f\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438, \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u0442\u0440\u043e\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u043a\u043e\u0440\u0443\u0442\u0438\u043d.</li> </ol> <p>\u0421\u0445\u0435\u043c\u0430\u0442\u0438\u0447\u043d\u043e \u0441\u0435\u0440\u0432\u0438\u0441 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043d\u0430 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0435. </p>"},{"location":"backup-spreadsheet/","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0431\u044d\u043a\u0430\u043f\u0430","text":""},{"location":"backup-spreadsheet/#_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441 \u0431\u044d\u043a\u0430\u043f\u043e\u043c","text":"job_id status start_at max_working_time tries_left dependencies pickled power_01 PROGRESS ASAP -1 1 () b'bytes' power_02 PROGRESS 2024-01-06 17:54:54.436528 16 6 ('power_01',) b'bytes' power_03 PROGRESS 2024-01-06 17:55:02.436568 8 3 ('power_01', 'power_02') b'bytes'"},{"location":"diagram/","title":"How this works?","text":"<pre><code>graph TD\n    your_code(\"Your code\") --&gt; |the simplest OOP calls of methods| Scheduler\n    Scheduler --&gt; |\"Process with Queue\\n(from ''multiprocessing'')\"| _Scheduler\n    _Scheduler &lt;--&gt; |coroutine| Job1\n    _Scheduler &lt;--&gt; |\"coroutine\\n(native Python's\\nyield and send())\"| Job2\n    _Scheduler &lt;--&gt; |coroutine| JobN\n    Job1 &lt;--&gt; |\"Process with Queue\"| Target1(\"Target1\")\n    Job2 &lt;--&gt; |\"Process with Queue\\n(from ''multiprocessing'')\"| Target2(\"Target2 \\n(the same term as Task)\")\n    JobN &lt;--&gt; |\"Process with Queue\"| TargetN(\"TargetN\")\n</code></pre>"},{"location":"how-to-guides/","title":"\u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u044d\u0442\u0438\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c","text":""},{"location":"how-to-guides/#requirements","title":"requirements","text":"<p>\u0415\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u044f\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0435\u0441\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u0432 \u044d\u0442\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 - \u044d\u0442\u043e <code>pytest</code>. <pre><code>pip install pytest\n</code></pre></p> <p>\u0412\u043f\u0440\u043e\u0447\u0435\u043c, \u0435\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0431\u0443\u0434\u0435\u0442\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b, \u0442\u043e \u0438 \u043e\u043d\u0430 \u0432\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u0430</p>"},{"location":"how-to-guides/#_2","title":"\u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0442\u0435\u0441\u0442\u044b","text":"<p>\u0427\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0433\u043d\u0430\u0442\u044c \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0442\u0435\u0441\u0442\u044b, \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0430\u0431\u0435\u0440\u0438\u0442\u0435 \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 (\u043d\u0430\u0445\u043e\u0434\u044f\u0441\u044c \u0432 \u043a\u043e\u0440\u043d\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430) <pre><code>pytest\n</code></pre> \u0427\u0442\u043e\u0431\u044b \u0443\u0442\u043e\u0447\u043d\u0438\u0442\u044c \u043a\u0430\u043a\u0438\u0435 \u0442\u0435\u0441\u0442\u044b \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u044b, \u0430 \u043a\u0430\u043a\u0438\u0435 \u043d\u0435\u0442, \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u0430\u0439\u043b <code>setup.cfg</code> - \u0440\u0430\u0437\u0434\u0435\u043b <code>[tool:pytest]</code>.</p>"},{"location":"how-to-guides/#_3","title":"\u0412\u0430\u0448\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438","text":""},{"location":"how-to-guides/#job","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 Job","text":"<p>\u0415\u0441\u043b\u0438 \u0445\u043e\u0442\u0438\u0442\u0435, \u0447\u0442\u043e\u0431\u044b \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a \u0437\u0430\u0434\u0430\u0447 \u0440\u0430\u0431\u043e\u0442\u0430\u043b \u0441 \u043a\u0430\u043a\u0438\u043c\u0438-\u043b\u0438\u0431\u043e \u0432\u0430\u0448\u0438\u043c\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438, \u0442\u043e \u043f\u0430\u043a\u0443\u0439\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043a \u043d\u0438\u043c \u0432 <code>functools.partial</code>. \u042d\u0442\u0430 \u043e\u0431\u0451\u0440\u0442\u043a\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u0443. </p> <p><pre><code>def my_function(a, b, c):\n    ...\n    return result\n\njob_1 = Job(\n    [functools.partial(my_function, 10, 'Hello', {'a': 5 })], \n     start_at=...,\n    max_working_time=...,\n    tries=...,\n    dependencies=(..., ...)\n)\n</code></pre> <code>functools.partial</code> \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 (\u0438\u043b\u0438 \u043a\u043e\u0440\u0442\u0435\u0436\u0435) \u0438 \u0431\u044b\u0442\u044c \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u0435\u0433\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u043c.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f <code>Job</code> \u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0432 \u0442\u0435\u0441\u0442\u0430\u0445 (\u043f\u0430\u043f\u043a\u0430 <code>tests</code>).</p>"},{"location":"how-to-guides/#_4","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a\u0430","text":"<p>\u0417\u0430\u0442\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 Schedule \u0438 \u043f\u043e \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0432 \u043d\u0435\u0433\u043e \u043a\u0430\u0436\u0434\u0443\u044e <code>Job</code>.</p> <p><pre><code>scheduler = Scheduler()\nscheduler.schedule(job_1)\n...\nscheduler.schedule(job_n)\n</code></pre> \u0418 \u0437\u0430\u0442\u0435\u043c \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 <pre><code>scheduler.run()\nscheduler.join()  # \u0436\u0434\u0451\u043c \u043a\u043e\u043d\u0446\u0430 \u0432\u0441\u0435\u0445 \u0440\u0430\u0431\u043e\u0442\n</code></pre></p>"},{"location":"how-to-guides/#_5","title":"\u041e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u043a \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a\u0430","text":"<p>\u0414\u0430\u043b\u044c\u0448\u0435 \u0435\u0441\u043b\u0438 \u0432\u044b \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442\u0435\u0441\u044c \u043f\u0440\u0435\u0440\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043a\u043e\u0433\u0434\u0430 \u0443\u0433\u043e\u0434\u043d\u043e <pre><code>scheduler.stop()\n</code></pre></p> <p>\u0422\u0435\u043f\u0435\u0440\u044c \u043a\u043e\u0433\u0434\u0430 \u0443\u0433\u043e\u0434\u043d\u043e \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0440\u0435\u0441\u0442\u0430\u0440\u0442 <pre><code>scheduler.restart()\n</code></pre> \u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438 \u0440\u0435\u0441\u0442\u0430\u0440\u0442 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0437\u0430 \u0441\u0447\u0451\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u0451\u043d\u043d\u044b\u0445 \u0431\u044d\u043a\u0430\u043f-\u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u043f\u0430\u043f\u043a\u0435 <code>backup</code>.</p>"},{"location":"job/","title":"class Job (\u0417\u0430\u0434\u0430\u0447\u0430)","text":""},{"location":"job/#job.Job","title":"<code>Job</code>","text":"<p>A class used to represent a Job. It contains one target (task) inside it. A target should be a <code>functools.partial</code>. <code>partial</code> is a handy construction which is like a zip with a target function and arguments together.</p> <p>Attributes:</p> Name Type Description <code>all_id</code> <code>dict</code> <p>contains already used identifiers and their total number</p> <code>__max_id_length</code> <code>int</code> <p>the max length of identifier (also 3 symbols will be added like '_01', '_02' etc.).</p> <code>__tick</code> <code>float</code> <p>something like 'a frequency' of the whole project in seconds</p> Source code in <code>job.py</code> <pre><code>class Job:\n    \"\"\"\n    A class used to represent a Job. It contains one target (task) inside it.\n    A target should be a `functools.partial`.\n    `partial` is a handy construction\n    which is like a zip with a target function and arguments together.\n\n    Attributes\n    ----------\n    all_id : dict\n        contains already used identifiers and their total number\n    __max_id_length : int\n        the max length of identifier (also 3 symbols will be added like '_01', '_02' etc.).\n    __tick : float\n        something like 'a frequency' of the whole project in seconds\n    \"\"\"\n    all_id: Dict[str, int] = {}\n\n    config = ConfigParser()\n    config.read('setup.cfg')\n    __max_id_length = int(config['job']['max_id_length'])\n    __tick = float(config['scheduler']['tick'])\n\n    def __init__(self, targets: list[partial],\n                 start_at: str = \"\",\n                 max_working_time: int = -1,\n                 tries: int = 1,\n                 dependencies: tuple[str, ...] = tuple(),\n                 id: Optional[str] = None):  # id should be set externally just in case of restoring from backup\n        self.__targets = targets\n        self.start_at = start_at\n        self.max_working_time = max_working_time\n        self.tries = tries\n        self.dependencies = dependencies\n        self.loop: Any = None  # main coroutine of this class\n\n        if id:   # id should be set from outside just in case of restoring from backup\n            self.__id = id\n        else:\n            self.set_id()\n\n    def set_id(self) -&gt; None:\n        name = self.__targets[0].func.__name__\n        if len(name) &gt; Job.__max_id_length:\n            name = name[0:Job.__max_id_length]\n\n        if name in Job.all_id.keys():\n            Job.all_id[name] += 1\n        else:\n            Job.all_id[name] = 1\n\n        siblings_number = Job.all_id[name]  # other jobs which have the same basic name\n        zero = '0' if siblings_number &lt; 10 else ''\n        self.__id = name + '_' + zero + str(siblings_number)\n\n    def get_id(self) -&gt; str:\n        \"\"\"Return identifier of a Job.\"\"\"\n        return self.__id\n\n    @staticmethod\n    def target_and_queue(target: Callable, queue: Queue) -&gt; None:\n        \"\"\"Wrap a function into another function and put a result in the queue.\"\"\"\n        try:\n            result = str(target())\n        except Exception as e:\n            logger.warning(f\"Exception is caught {e}.\")\n            queue.put(EXCEPTION + str(e))\n        else:\n            logger.debug(f\"Result {result} is put in the queue.\")\n            queue.put(result)\n\n    def run(self) -&gt; None:\n        \"\"\"Start a coroutine. It's being called just one time during a life of a Job object.\"\"\"\n        self.loop = self.start_loop()\n\n    def start_loop(self) -&gt; Generator[Response | None, Request, None]:\n        \"\"\"\n        Return main coroutine of the whole class.\n\n        target is functools.partial(func, arg1, arg2 ...)\n\n        Returns\n        -------\n        coroutine\n            a coroutine.\n        \"\"\"\n        yield None\n        for i, target in enumerate(self.__targets):\n            queue: Queue = Queue()\n            func = partial(Job.target_and_queue, target, queue)\n            process = Process(target=func)\n            process.start()\n\n            while True:\n                request = yield None\n                logger.debug(f\"Job got request '{request.value}'.\")\n                sleep(4 * Job.__tick)\n\n                response: None | Response = None\n                if request != Request.report_status:\n                    response = Response(ResponseStatus.error, None)\n                    logger.debug(\"Unknown type of request.\")\n                    yield response\n                    continue\n\n                if process.is_alive():\n                    response = Response(ResponseStatus.waiting, None)\n                    logger.debug(f\"Job returns status '{ResponseStatus.waiting.value}'.\")\n                    yield response\n                    continue\n\n                result = None if queue.empty() else queue.get()\n                if result and result.startswith(EXCEPTION):\n                    result = result[len(EXCEPTION):]\n                    logger.warning(f\"Exception {result} is taken from the queue.\")\n                    response = Response(ResponseStatus.error, {i: result})\n                else:\n                    logger.debug(f\"{self.__id}: Result {result} is taken from the queue.\")\n                    response = Response(ResponseStatus.result, {i: result})\n                yield response\n                break\n        yield None\n        response = Response(ResponseStatus.finish, None)\n        yield response\n\n    @staticmethod\n    def clear() -&gt; None:\n        \"\"\"Clear itself when user sent `stop` signal\"\"\"\n        del Job.all_id\n        Job.all_id = {}\n\n    def list_repr(self, is_ready: bool = True) -&gt; list[str]:\n        \"\"\"return the representation of a job for writing in a CSV spreadsheet.\n        Order is in according to 'header' in 'scheduler'.\n        This is like __repr__, but it returns a list, not str.\n        \"\"\"\n        # the same 'PROGRESS' status for all cases except for 'READY' status\n        status = 'READY' if is_ready else 'PROGRESS'\n        func = pickle_dumps(self.__targets[0])\n        row = [self.__id,\n               status,\n               self.start_at if self.start_at else 'ASAP',\n               self.max_working_time,\n               self.tries,  # it should contain only tries left\n               self.dependencies,\n               func,\n               ]\n        row_with_strings = []\n        for item in row:\n            token = str(item)\n            token.replace('\\t', '    ')\n            row_with_strings.append(token if token else 'ERROR')\n        return row_with_strings\n</code></pre>"},{"location":"job/#job.Job.clear","title":"<code>clear()</code>  <code>staticmethod</code>","text":"<p>Clear itself when user sent <code>stop</code> signal</p> Source code in <code>job.py</code> <pre><code>@staticmethod\ndef clear() -&gt; None:\n    \"\"\"Clear itself when user sent `stop` signal\"\"\"\n    del Job.all_id\n    Job.all_id = {}\n</code></pre>"},{"location":"job/#job.Job.get_id","title":"<code>get_id()</code>","text":"<p>Return identifier of a Job.</p> Source code in <code>job.py</code> <pre><code>def get_id(self) -&gt; str:\n    \"\"\"Return identifier of a Job.\"\"\"\n    return self.__id\n</code></pre>"},{"location":"job/#job.Job.list_repr","title":"<code>list_repr(is_ready=True)</code>","text":"<p>return the representation of a job for writing in a CSV spreadsheet. Order is in according to 'header' in 'scheduler'. This is like repr, but it returns a list, not str.</p> Source code in <code>job.py</code> <pre><code>def list_repr(self, is_ready: bool = True) -&gt; list[str]:\n    \"\"\"return the representation of a job for writing in a CSV spreadsheet.\n    Order is in according to 'header' in 'scheduler'.\n    This is like __repr__, but it returns a list, not str.\n    \"\"\"\n    # the same 'PROGRESS' status for all cases except for 'READY' status\n    status = 'READY' if is_ready else 'PROGRESS'\n    func = pickle_dumps(self.__targets[0])\n    row = [self.__id,\n           status,\n           self.start_at if self.start_at else 'ASAP',\n           self.max_working_time,\n           self.tries,  # it should contain only tries left\n           self.dependencies,\n           func,\n           ]\n    row_with_strings = []\n    for item in row:\n        token = str(item)\n        token.replace('\\t', '    ')\n        row_with_strings.append(token if token else 'ERROR')\n    return row_with_strings\n</code></pre>"},{"location":"job/#job.Job.run","title":"<code>run()</code>","text":"<p>Start a coroutine. It's being called just one time during a life of a Job object.</p> Source code in <code>job.py</code> <pre><code>def run(self) -&gt; None:\n    \"\"\"Start a coroutine. It's being called just one time during a life of a Job object.\"\"\"\n    self.loop = self.start_loop()\n</code></pre>"},{"location":"job/#job.Job.start_loop","title":"<code>start_loop()</code>","text":"<p>Return main coroutine of the whole class.</p> <p>target is functools.partial(func, arg1, arg2 ...)</p> <p>Returns:</p> Type Description <code>coroutine</code> <p>a coroutine.</p> Source code in <code>job.py</code> <pre><code>def start_loop(self) -&gt; Generator[Response | None, Request, None]:\n    \"\"\"\n    Return main coroutine of the whole class.\n\n    target is functools.partial(func, arg1, arg2 ...)\n\n    Returns\n    -------\n    coroutine\n        a coroutine.\n    \"\"\"\n    yield None\n    for i, target in enumerate(self.__targets):\n        queue: Queue = Queue()\n        func = partial(Job.target_and_queue, target, queue)\n        process = Process(target=func)\n        process.start()\n\n        while True:\n            request = yield None\n            logger.debug(f\"Job got request '{request.value}'.\")\n            sleep(4 * Job.__tick)\n\n            response: None | Response = None\n            if request != Request.report_status:\n                response = Response(ResponseStatus.error, None)\n                logger.debug(\"Unknown type of request.\")\n                yield response\n                continue\n\n            if process.is_alive():\n                response = Response(ResponseStatus.waiting, None)\n                logger.debug(f\"Job returns status '{ResponseStatus.waiting.value}'.\")\n                yield response\n                continue\n\n            result = None if queue.empty() else queue.get()\n            if result and result.startswith(EXCEPTION):\n                result = result[len(EXCEPTION):]\n                logger.warning(f\"Exception {result} is taken from the queue.\")\n                response = Response(ResponseStatus.error, {i: result})\n            else:\n                logger.debug(f\"{self.__id}: Result {result} is taken from the queue.\")\n                response = Response(ResponseStatus.result, {i: result})\n            yield response\n            break\n    yield None\n    response = Response(ResponseStatus.finish, None)\n    yield response\n</code></pre>"},{"location":"job/#job.Job.target_and_queue","title":"<code>target_and_queue(target, queue)</code>  <code>staticmethod</code>","text":"<p>Wrap a function into another function and put a result in the queue.</p> Source code in <code>job.py</code> <pre><code>@staticmethod\ndef target_and_queue(target: Callable, queue: Queue) -&gt; None:\n    \"\"\"Wrap a function into another function and put a result in the queue.\"\"\"\n    try:\n        result = str(target())\n    except Exception as e:\n        logger.warning(f\"Exception is caught {e}.\")\n        queue.put(EXCEPTION + str(e))\n    else:\n        logger.debug(f\"Result {result} is put in the queue.\")\n        queue.put(result)\n</code></pre>"},{"location":"mkdocs-basics/","title":"\u041e MkDocs","text":"<p>\u042d\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0430 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0430 MkDocs.</p>"},{"location":"mkdocs-basics/#_1","title":"\u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b","text":"<p>\u0427\u0442\u043e\u0431\u044b \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f IDE \u0438\u043b\u0438 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b <pre><code>mkdocs serve\n</code></pre></p> <p>\u041f\u0435\u0440\u0435\u0441\u043e\u0431\u0440\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0441\u0430\u0439\u0442 (\u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 \u043f\u0430\u043f\u043a\u0435 site).  \u041d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0443 \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437, \u043d\u043e \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043f\u0435\u0440\u0435\u0441\u0431\u043e\u0440\u043a\u0438. <pre><code>mkdocs build\n</code></pre></p> <p>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043d\u0430 \u0433\u0438\u0442\u0445\u0430\u0431\u0435 (\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0451\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0443\u0436\u0435 \u0431\u044b\u043b\u0438 \u043d\u0430 \u0433\u0438\u0442\u0445\u0430\u0431\u0435 \u0445\u043e\u0442\u044c \u043d\u0430 \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u0432\u0435\u0442\u043a\u0435). <pre><code>mkdocs gh-deploy\n</code></pre></p>"},{"location":"mkdocs-basics/#mkdocs_1","title":"\u0417\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0438 \u043f\u0430\u043f\u043a\u0438 \u043f\u043e\u0434 mkdocs","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\nsite/\n    ...       # \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0441\u0430\u0439\u0442\n</code></pre>"},{"location":"mkdocs-basics/#mkdocs_2","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e mkdocs","text":"<p>\u041a\u0440\u0430\u0442\u043a\u0430\u044f \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e mkdocs <pre><code>mkdocs -h\n</code></pre></p> <p>\u041f\u043e\u043b\u0435\u0437\u043d\u0430\u044f \u0441\u0442\u0430\u0442\u044c\u044f \u0441\u043e \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0430 mkdocs: <pre><code>open https://realpython.com/python-project-documentation-with-mkdocs/\n</code></pre></p> <p>\u0411\u043e\u043b\u044c\u0448\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 - \u043d\u0430 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c \u0441\u0430\u0439\u0442\u0435 <pre><code>open https://www.mkdocs.org\n</code></pre></p>"},{"location":"mkdocs-basics/#_2","title":"\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f","text":"<p>\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f <pre><code>mkdocs\nmkdocs-material\nmkdocstrings\nmkdocstrings-python\npymdown-extensions\n</code></pre> \u0412\u0441\u0435\u0445 \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b <code>pip install ...</code></p> <p>\u0421\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b mkdocs \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0439 \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b <pre><code>cd ..\nmkdocs get-deps\n</code></pre></p>"},{"location":"scheduler/","title":"class Scheduler (\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a)","text":""},{"location":"scheduler/#scheduler.Scheduler","title":"<code>Scheduler</code>","text":"<p>The 'official' simple wrap for the class _Scheduler.</p> Source code in <code>scheduler.py</code> <pre><code>class Scheduler:\n    \"\"\"The 'official' simple wrap for the class _Scheduler.\"\"\"\n\n    def __init__(self, pool_size: int = 10) -&gt; None:\n        config = ConfigParser()\n        config.read('setup.cfg')\n        self.__tick = float(config['scheduler']['tick'])\n        backup_path = str(config['scheduler']['backup'])\n\n        self.queue: Queue = Queue()\n        self.scheduler = _Scheduler(queue=self.queue, pool_size=pool_size, tick=self.__tick, backup=backup_path)\n        self.process = Process(target=self.scheduler.run,)\n\n    def schedule(self, job: Job) -&gt; None:\n        \"\"\"Add a job in the list of pending jobs.\"\"\"\n        self.scheduler.schedule(job)\n\n    def run(self) -&gt; None:\n        \"\"\"Start a process with real _Scheduler.\n        It's highly recommended to use join() (or sleep()) after run() in your function\n        \"\"\"\n        self.process.start()\n\n    def join(self) -&gt; None:\n        self.process.join()\n\n    def stop(self) -&gt; None:\n        logger.debug(\"Scheduler.stop() is called.\")\n        self.queue.put('stop')\n        sleep(self.__tick)\n        self.clear()\n\n    def clear(self) -&gt; None:\n        del self.scheduler\n        del self.process\n        del self.queue\n\n    def restart(self) -&gt; None:\n        scheduler = self.scheduler\n        self.queue = Queue()\n        self.scheduler.queue = self.queue\n        self.process = Process(target=scheduler.restart,)\n        self.process.start()\n</code></pre>"},{"location":"scheduler/#scheduler.Scheduler.run","title":"<code>run()</code>","text":"<p>Start a process with real _Scheduler. It's highly recommended to use join() (or sleep()) after run() in your function</p> Source code in <code>scheduler.py</code> <pre><code>def run(self) -&gt; None:\n    \"\"\"Start a process with real _Scheduler.\n    It's highly recommended to use join() (or sleep()) after run() in your function\n    \"\"\"\n    self.process.start()\n</code></pre>"},{"location":"scheduler/#scheduler.Scheduler.schedule","title":"<code>schedule(job)</code>","text":"<p>Add a job in the list of pending jobs.</p> Source code in <code>scheduler.py</code> <pre><code>def schedule(self, job: Job) -&gt; None:\n    \"\"\"Add a job in the list of pending jobs.\"\"\"\n    self.scheduler.schedule(job)\n</code></pre>"},{"location":"tests/","title":"\u0422\u0435\u0441\u0442\u044b, \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":""},{"location":"tests/#conftest","title":"conftest","text":"<p>Actions before every run of all tests.</p>"},{"location":"tests/#tests.conftest.test_actions_before_all_tests","title":"<code>test_actions_before_all_tests()</code>","text":"<p>Remove <code>backup</code> and <code>tmp</code> folders and everything inside them. Then, create <code>tmp</code> folder (it's needed for tests only).</p> Source code in <code>tests/conftest.py</code> <pre><code>def test_actions_before_all_tests():\n    \"\"\"Remove `backup` and `tmp` folders and everything inside them.\n    Then, create `tmp` folder (it's needed for tests only).\n    \"\"\"\n    backup_parent = BACKUP.parent\n    if backup_parent and backup_parent.exists():\n        rmtree(backup_parent)\n    tmp = TMP\n    if tmp.exists():\n        rmtree(tmp)\n    tmp.mkdir()\n</code></pre>"},{"location":"tests/#scenariospy","title":"scenarios.py","text":""},{"location":"tests/#tests.scenarios.run_and_wait","title":"<code>run_and_wait(scheduler)</code>","text":"<p>Simplest scenario</p> Source code in <code>tests/scenarios.py</code> <pre><code>def run_and_wait(scheduler):\n    \"\"\"Simplest scenario\"\"\"\n    scheduler.run()\n    sleep(TICK)\n    scheduler.join()\n</code></pre>"},{"location":"tests/#tests.scenarios.run_stop_and_restart","title":"<code>run_stop_and_restart(scheduler)</code>","text":"<p>Run scheduler, stop it and restart scheduler from backup</p> Source code in <code>tests/scenarios.py</code> <pre><code>def run_stop_and_restart(scheduler):\n    \"\"\"Run scheduler, stop it and restart scheduler from backup\"\"\"\n    scheduler.run()\n    sleep(TICK)\n    scheduler.stop()\n    sleep(2 * TICK)\n    del scheduler\n    scheduler_new = Scheduler()\n    scheduler_new.restart()\n    scheduler_new.join()\n</code></pre>"},{"location":"tests/#tests.scenarios.schedule_jobs_sequentially","title":"<code>schedule_jobs_sequentially(targets)</code>","text":"<p>Do jobs one after another. This is one of basic scenarios for some tests.</p> Source code in <code>tests/scenarios.py</code> <pre><code>def schedule_jobs_sequentially(targets: list[partial]):\n    \"\"\"Do jobs one after another.\n    This is one of basic scenarios for some tests.\n    \"\"\"\n    scheduler = Scheduler()\n    ids: list[str] = []\n    for target in targets:\n        job = Job(\n            [target],\n            dependencies=(*ids,),\n        )\n\n        scheduler.schedule(job)\n        ids.append(job.get_id())\n    return scheduler\n</code></pre>"},{"location":"tests/#test_fs","title":"test_fs","text":"<p>This file is for tests, required by the initial statement of work (SoW):</p> <ul> <li><code>\u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439: \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0439 \u0438 \u0444\u0430\u0439\u043b\u043e\u0432</code></li> <li><code>\u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438: \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435, \u0447\u0442\u0435\u043d\u0438\u0435, \u0437\u0430\u043f\u0438\u0441\u044c</code></li> </ul>"},{"location":"tests/#tests.test_fs.job_fs_create_folders","title":"<code>job_fs_create_folders(names)</code>","text":"<p>Create folders</p> Source code in <code>tests/test_fs.py</code> <pre><code>def job_fs_create_folders(names: list):\n    \"\"\"Create folders\"\"\"\n    dir_ = TMP\n    dir_.mkdir(parents=False, exist_ok=True)\n    for name in names:\n        dir_ /= name\n        dir_.mkdir(parents=False, exist_ok=True)\n    return f\"A chain of folders is created '{names[0]}' ... '{names[-1]}'\"\n</code></pre>"},{"location":"tests/#tests.test_fs.job_fs_delete_folders","title":"<code>job_fs_delete_folders(names)</code>","text":"<p>Delete a chain of folders one-by-one from the end to the beginning</p> Source code in <code>tests/test_fs.py</code> <pre><code>def job_fs_delete_folders(names: list):\n    \"\"\"Delete a chain of folders one-by-one from the end to the beginning\"\"\"\n    dir_ = TMP\n    for name in names:\n        dir_ /= name\n    while dir_ != TMP:\n        dir_.rmdir()\n        dir_ = dir_.parent\n    return f\"A chain of folders is deleted '{names[0]}' ... '{names[-1]}'\"\n</code></pre>"},{"location":"tests/#tests.test_fs.job_fs_modify_folders","title":"<code>job_fs_modify_folders(names, names_new)</code>","text":"<p>Rename folders</p> Source code in <code>tests/test_fs.py</code> <pre><code>def job_fs_modify_folders(names: list, names_new: list):\n    \"\"\"Rename folders\"\"\"\n    dir_ = TMP\n    for i, _ in enumerate(names):\n        dir_old = dir_ / names[i]\n        dir_new = dir_ / names_new[i]\n\n        dir_ = dir_old.rename(dir_new)\n    return f\"A chain of folders is renamed '{names_new[0]}' ... '{names_new[-1]}'\"\n</code></pre>"},{"location":"tests/#tests.test_fs.names_of_principles","title":"<code>names_of_principles()</code>","text":"<p>Return few Zen of Python principles. They are used later in tests as an alternative to 'Lorem Ipsum'.</p> Source code in <code>tests/test_fs.py</code> <pre><code>@fixture\ndef names_of_principles():\n    \"\"\"Return few Zen of Python principles.\n    They are used later in tests as an alternative to 'Lorem Ipsum'.\n    \"\"\"\n    zen_of_python = get_zen_of_python()\n    lst1 = []  # original principles\n    for line in zen_of_python.split('\\n')[2:8]:\n        symbols = \",.*!'\"\n        for symbol in symbols:\n            line = line.replace(symbol, '')\n        lst1.append(line)\n\n    lst2 = []  # reverted (modified) principles\n    for line in lst1:\n        words = line.split(' ')\n        line_new = ' '.join([words[-1], *words[1:-1], words[0]])\n        line_new = line_new.replace('better', 'worse').capitalize()\n        lst2.append(line_new)\n    return lst1, lst2\n</code></pre>"},{"location":"tests/#tests.test_fs.test_fs_directories","title":"<code>test_fs_directories(names_of_principles)</code>","text":"<p>Create directories, modify their names and delete them.</p> Source code in <code>tests/test_fs.py</code> <pre><code>def test_fs_directories(names_of_principles):\n    \"\"\"Create directories, modify their names and delete them.\"\"\"\n    target_create = partial(job_fs_create_folders, names_of_principles[0])\n    target_modify = partial(job_fs_modify_folders, *names_of_principles)\n    target_delete = partial(job_fs_delete_folders, names_of_principles[1])\n\n    scheduler = schedule_jobs_sequentially([target_create, target_modify, target_delete])\n    run_and_wait(scheduler)\n</code></pre>"},{"location":"tests/#tests.test_fs.test_fs_files","title":"<code>test_fs_files(names_of_principles)</code>","text":"<p>Create files, write text in them, modify text inside and, the last, read them.</p> Source code in <code>tests/test_fs.py</code> <pre><code>def test_fs_files(names_of_principles):\n    \"\"\"Create files, write text in them, modify text inside and, the last, read them.\"\"\"\n    target_create = partial(job_fs_create_files, names_of_principles[0], names_of_principles[0])\n    target_modify = partial(job_fs_modify_files, names_of_principles[0], names_of_principles[1])\n    target_read = partial(job_fs_read_files, names_of_principles[0])\n\n    scheduler = schedule_jobs_sequentially((target_create, target_modify, target_read,))\n    run_stop_and_restart(scheduler)\n</code></pre>"},{"location":"tests/#test_web","title":"test_web","text":"<p>This file is for tests, required by the initial statement of work (SoW):</p> <ul> <li><code>\u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u0435\u0442\u044c\u044e: \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u0441\u044b\u043b\u043e\u043a (GET-\u0437\u0430\u043f\u0440\u043e\u0441\u044b) \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430</code></li> </ul>"},{"location":"tests/#tests.test_web.job_request_weather","title":"<code>job_request_weather(city)</code>","text":"<p>This could be a fixture (a function which returns an inner function), but in this case we get an error \"Can't pickle local object 'request_weather.._request_weather'\" Source code in <code>tests/test_web.py</code> <pre><code>def job_request_weather(city):  # web_job\n    \"\"\"This could be a fixture (a function which returns an inner function),\n    but in this case we get an error\n    \"Can't pickle local object 'request_weather.&lt;locals&gt;._request_weather'\"\n    \"\"\"\n    url = get_url_by_city_name(city)\n\n    try:\n        response = YandexWeatherAPI.get_forecasting(url)\n        if 'forecasts' not in response:\n            raise Exception(\"Response does not have the forecast data\")\n    except Exception as e:\n        warning = f\"city {city} is skipped because of exception: {e}\"\n        raise Exception(warning)\n    else:\n        if not TMP.exists():\n            TMP.mkdir(parents=True)\n\n        raw_json_path = TMP / f'{city}.json'\n        with open(raw_json_path, 'w+') as raw_json:\n            json_dump(response, raw_json)\n        result = f\"Request is written in the file {raw_json_path.stem}.\"\n        logger.debug(result)\n\n        return result\n</code></pre>"},{"location":"tests/#tests.test_web.test_web_job","title":"<code>test_web_job(cities_fixture)</code>","text":"<p>Test few web jobs</p> Source code in <code>tests/test_web.py</code> <pre><code>def test_web_job(cities_fixture):\n    \"\"\"Test few web jobs\"\"\"\n    cities = cities_fixture\n    scheduler = Scheduler(pool_size=12)\n    for city in cities:\n        job = Job(\n            [partial(job_request_weather, city)],\n        )\n        scheduler.schedule(job)\n    scheduler.run()\n    scheduler.join()\n</code></pre>"},{"location":"tests/#tests.test_web.test_web_job1","title":"<code>test_web_job1()</code>","text":"<p>Test one web job</p> Source code in <code>tests/test_web.py</code> <pre><code>def test_web_job1():\n    \"\"\"Test one web job\"\"\"\n    job = Job(\n        [partial(job_request_weather, \"SPETERSBURG\")],\n    )\n    scheduler = Scheduler(pool_size=6)\n    scheduler.schedule(job)\n    scheduler.run()\n    scheduler.join()\n</code></pre>"},{"location":"tests/#test_multi","title":"test_multi","text":"<p>The file is for tests, required by the initial statement of work (SoW):</p> <ul> <li><code>\u043e\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0438\u0437 3 \u0437\u0430\u0434\u0430\u0447,    \u0437\u0430\u0432\u0438\u0441\u044f\u0449\u0438\u0445 \u0434\u0440\u0443\u0433 \u043e\u0442 \u0434\u0440\u0443\u0433\u0430 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0440\u0443\u0433 \u0437\u0430 \u0434\u0440\u0443\u0433\u043e\u043c</code></li> </ul>"},{"location":"tests/#tests.test_multi.test_multi_job","title":"<code>test_multi_job()</code>","text":"<p>Test a conveyor (pipeline) of 3+ jobs.</p> Source code in <code>tests/test_multi.py</code> <pre><code>def test_multi_job():\n    \"\"\"Test a conveyor (pipeline) of 3+ jobs.\"\"\"\n    target_create_dirs = partial(job_create_dirs, )\n    target_create_files = partial(job_create_files, )\n    target_write_in_files = partial(job_write_in_files, )\n    scheduler = schedule_jobs_sequentially((target_create_dirs,\n                                            target_create_files,\n                                            target_write_in_files,\n                                            ))\n    run_and_wait(scheduler)\n</code></pre>"},{"location":"tests/#test_multi_1","title":"test_multi","text":"<p>Very simple tests of class Job.</p>"},{"location":"tests/#test_integration","title":"test_integration","text":"<p>This file is for just calculation tests. These tests don't require the internet and the file system.</p>"},{"location":"tests/#tests.test_calculations.test_calculations","title":"<code>test_calculations(fixture_for_power)</code>","text":"<p>Test \"three simple jobs for a scheduler\"</p> <p>Parameters:</p> Name Type Description Default <code>fixture_for_power</code> <code>fixture</code> <p>a fixture with variables for a power function a**b</p> required Source code in <code>tests/test_calculations.py</code> <pre><code>def test_calculations(fixture_for_power: tuple) -&gt; None:\n    \"\"\"\n    Test \"three simple jobs for a scheduler\"\n\n    Parameters\n    ----------\n    fixture_for_power : fixture\n        a fixture with variables for a power function a**b\n    \"\"\"\n    tuples = fixture_for_power\n\n    jobs = [Job([partial(power, *args_), ]) for args_ in tuples]\n    scheduler = Scheduler()\n\n    for job in jobs:\n        assert isinstance(job, Job)\n        scheduler.schedule(job)\n\n    scheduler.run()\n    scheduler.join()\n</code></pre>"},{"location":"tests/#tests.test_calculations.test_calculations_with_a_stop","title":"<code>test_calculations_with_a_stop(fixture_for_power)</code>","text":"<p>Test \"three jobs for a scheduler with stop and rerun\"</p> <p>Parameters:</p> Name Type Description Default <code>fixture_for_power</code> <code>fixture</code> <p>a fixture with variables for a power function a**b</p> required Source code in <code>tests/test_calculations.py</code> <pre><code>def test_calculations_with_a_stop(fixture_for_power: tuple) -&gt; None:\n    \"\"\"\n    Test \"three jobs for a scheduler with stop and rerun\"\n\n    Parameters\n    ----------\n    fixture_for_power : fixture\n        a fixture with variables for a power function a**b\n    \"\"\"\n    tuples = fixture_for_power\n\n    job1 = Job([partial(power, *tuples[0])])\n    scheduler = Scheduler()\n    scheduler.schedule(job1)\n\n    id1 = job1.get_id()\n    job2 = Job(\n        targets=[partial(power, *tuples[1])],\n        start_at=str(datetime.now() + timedelta(seconds=8)),\n        max_working_time=16,\n        tries=6,\n        dependencies=(id1,)\n    )\n    scheduler.schedule(job2)\n\n    id2 = job2.get_id()\n    job3 = Job(\n        targets=[partial(power, *tuples[2])],\n        start_at=str(datetime.now() + timedelta(seconds=16)),\n        max_working_time=8,\n        tries=3,\n        dependencies=(id1, id2)\n    )\n    scheduler.schedule(job3)\n\n    scheduler.run()\n    sleep(4 * TICK)\n    scheduler.stop()\n    sleep(8 * TICK)\n    del scheduler\n    scheduler_new = Scheduler()\n    scheduler_new.restart()\n    sleep(TICK)\n    scheduler_new.join()\n</code></pre>"}]}