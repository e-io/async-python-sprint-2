{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u041f\u0440\u043e\u0435\u043a\u0442\u043d\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u043f\u0440\u0438\u043d\u0442\u0430","text":"<p>\u0421\u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u0442\u0443\u043f\u0430\u044e\u0449\u0438\u0445 \u0437\u0430\u0434\u0430\u0447.</p>"},{"location":"#_2","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f","text":"<p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0443 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0430 MkDocs.</p> <ul> <li>\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043e\u043d\u043b\u0430\u0439\u043d</li> </ul> <pre><code>open https://e-io.github.io/async-python-sprint-2/\n</code></pre> <ul> <li>\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043e\u0444\u043b\u0430\u0439\u043d:<ul> <li>\u0444\u0430\u0439\u043b\u044b markdown - \u0432 \u043f\u0430\u043f\u043a\u0435 <code>docs/</code></li> <li>\u043a\u0430\u043a \u0441\u0430\u0439\u0442 - <code>site/index.html</code></li> </ul> </li> </ul> <p>\u0422\u0430\u043a\u0436\u0435 \u0441\u0430\u0439\u0442 \u043c\u043e\u0436\u0435\u0442 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \"\u043d\u0430 \u043b\u0435\u0442\u0443\" \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b</p> <pre><code>mkdocs serve  \n</code></pre> <p>\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0444\u0430\u0439\u043b <code>docs/index.md</code> \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f (\u0434\u043e\u043b\u0436\u0435\u043d \u044f\u0432\u043b\u044f\u0442\u044c\u0441\u044f) \u0441\u0438\u043c\u0432\u043e\u043b\u044c\u043d\u043e\u0439 \u0441\u0441\u044b\u043b\u043a\u043e\u0439 (<code>symlink</code> - <code>ln -s a0 a1</code>) \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u0430 <code>README.md</code> \u0438\u0437 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u043f\u0430\u043f\u043a\u0438. </p>"},{"location":"#_3","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>1. \u041e\u043f\u0438\u0441\u0430\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043a\u043b\u0430\u0441\u0441\u0430 <code>Scheduler</code>.</p> <p>\u0423\u0441\u043b\u043e\u0432\u0438\u044f \u0438 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: - \u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0434\u043e 10 \u0437\u0430\u0434\u0430\u0447 (\u0434\u0435\u0444\u043e\u043b\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043e). - \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a \u0438 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0435\u0451 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a\u0430 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0432 \u0437\u0430\u0434\u0430\u0447\u0435. - \u041f\u0440\u0438 \u0448\u0442\u0430\u0442\u043d\u043e\u043c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0445 \u0438 \u043e\u0436\u0438\u0434\u0430\u044e\u0449\u0438\u0445 \u0437\u0430\u0434\u0430\u0447. - \u041f\u043e\u0441\u043b\u0435 \u0440\u0435\u0441\u0442\u0430\u0440\u0442\u0430 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u044e\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f.</p> <p>2. \u041e\u043f\u0438\u0441\u0430\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043a\u043b\u0430\u0441\u0441\u0430 <code>Job</code>.</p> <p>\u0423\u0441\u043b\u043e\u0432\u0438\u044f \u0438 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: - \u0423 \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0430 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440). \u0415\u0441\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0443\u043a\u0430\u0437\u0430\u043d, \u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0430 \u043f\u0440\u0435\u043a\u0440\u0430\u0449\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f, \u0435\u0441\u043b\u0438 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0432\u044b\u0441\u0438\u043b\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440. - \u0423 \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440). \u0415\u0441\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0443\u043a\u0430\u0437\u0430\u043d, \u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0430 \u0441\u0442\u0430\u0440\u0442\u0443\u0435\u0442 \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043f\u0435\u0440\u0438\u043e\u0434. - \u0423 \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0441\u0442\u0430\u0440\u0442\u043e\u0432 (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440). \u0415\u0441\u043b\u0438 \u0432 \u0445\u043e\u0434\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u0451\u043b \u0441\u0431\u043e\u0439 \u0438\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0438-\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043d\u0435 \u0431\u044b\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b, \u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0449\u0435\u043d\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437. \u0415\u0441\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d, \u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u0430\u0440\u0442\u043e\u0432 \u0440\u0430\u0432\u043d\u043e 0. - \u0423 \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u044b \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u2014 \u0437\u0430\u0434\u0430\u0447\u0430 \u0438\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0438, \u043e\u0442 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u0435\u0451 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440). \u0415\u0441\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0443\u043a\u0430\u0437\u0430\u043d, \u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0430 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0430\u0442\u044c \u0434\u043e \u043c\u043e\u043c\u0435\u043d\u0442\u0430, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u044b \u0437\u0430\u0434\u0430\u0447\u0438-\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438.</p> <p>3. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a\u0430 \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430\u0445.</p> <p>\u0423\u0441\u043b\u043e\u0432\u0438\u044f \u0438 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: - \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439: \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0439 \u0438 \u0444\u0430\u0439\u043b\u043e\u0432; - \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438: \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435, \u0447\u0442\u0435\u043d\u0438\u0435, \u0437\u0430\u043f\u0438\u0441\u044c; - \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u0435\u0442\u044c\u044e: \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u0441\u044b\u043b\u043e\u043a (GET-\u0437\u0430\u043f\u0440\u043e\u0441\u044b) \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430; - \u043e\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u043d\u0432\u0435\u0435\u0440 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0438\u0437 3 \u0437\u0430\u0434\u0430\u0447, \u0437\u0430\u0432\u0438\u0441\u044f\u0449\u0438\u0445 \u0434\u0440\u0443\u0433 \u043e\u0442 \u0434\u0440\u0443\u0433\u0430 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0440\u0443\u0433 \u0437\u0430 \u0434\u0440\u0443\u0433\u043e\u043c.</p>"},{"location":"#_4","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u0440\u0435\u0448\u0435\u043d\u0438\u044e","text":"<ol> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043a\u043e\u0440\u0443\u0442\u0438\u043d\u044b \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u044b, \u0438\u0437\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0432 \u0442\u0435\u043e\u0440\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438.</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u043d\u0435 \u0437\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043e.</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>asyncio</code> \u0437\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043e.</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u043c\u043e\u0434\u0443\u043b\u0438 \u044f\u0437\u044b\u043a\u0430.</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438 \u041e\u041e\u041f.</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044e \u0442\u0438\u043f\u043e\u0432.</li> <li>\u041b\u043e\u0433\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439.</li> <li>\u041f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0439.</li> <li>\u041f\u0440\u0438\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0438\u043b\u044c \u043a\u043e\u0434\u0430 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 pep8, flake8, mypy.</li> </ol>"},{"location":"#_5","title":"\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u043a \u0440\u0435\u0448\u0435\u043d\u0438\u044e","text":"<ol> <li>\u041f\u043e\u043a\u0440\u043e\u0439\u0442\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u0434 \u0442\u0435\u0441\u0442\u0430\u043c\u0438.</li> <li>\u0414\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0437\u0430\u0434\u0430\u0447 \u0438\u043b\u0438 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 <code>.lock</code>-\u0444\u0430\u0439\u043b\u044b \u0438 \u0438\u043d\u044b\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u044b \u2014 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>txt</code> \u0438\u043b\u0438 <code>json</code>.</li> <li>\u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447 \u0438/\u0438\u043b\u0438 \u0438\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0439 \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435\u043c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f <code>uid</code> \u0438\u043b\u0438 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 \u0448\u0430\u0431\u043b\u043e\u043d. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0441\u044b\u043b\u043e\u043a (<code>symlink</code>) \u043d\u0435 \u0437\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043e.</li> <li>\u0421\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u0430 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0430 \u043f\u043e\u0434 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435. \u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u043d\u0435 \u0437\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043e.</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u044b \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Timer \u0438\u043b\u0438 Condition.</li> <li>\u041f\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438, \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u0442\u0440\u043e\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u043a\u043e\u0440\u0443\u0442\u0438\u043d.</li> </ol> <p>\u0421\u0445\u0435\u043c\u0430\u0442\u0438\u0447\u043d\u043e \u0441\u0435\u0440\u0432\u0438\u0441 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043d\u0430 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0435{target=\"_blank\"}. </p>"},{"location":"how-to-guides/","title":"\u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u044d\u0442\u0438\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c","text":"<p>\u0421\u044e\u0434\u0430 \u043f\u043e\u0437\u0436\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u043f\u043e\u043b\u0435\u0437\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0442\u043e\u043c,  \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438 scheduler \u0438 job,  \u0447\u0442\u043e \u043e\u043d\u0438 \u0441\u043a\u0443\u0448\u0430\u044e\u0442, \u0430 \u0447\u0442\u043e \u043d\u0435\u0442.</p>"},{"location":"job/","title":"class Job (\u0417\u0430\u0434\u0430\u0447\u0430)","text":""},{"location":"job/#job.Job","title":"<code>Job</code>","text":"<p>A class used to represent a Job. It contains one or several tasks inside it. Each task should be a 'functools.partial'. 'Partial' is like a zip with a target function and arguments together.</p> <p>Attributes:</p> Name Type Description <code>all_id</code> <code>dict</code> <p>contains already used identifiers and their total number</p> <code>__max_id_length</code> <code>int</code> <p>the max length of identifier (also 2 digits will be added like '_01').</p> <code>__tick</code> <code>float</code> <p>something like 'a frequency' of the whole project in seconds</p> Source code in <code>job.py</code> <pre><code>class Job:\n    \"\"\"\n    A class used to represent a Job. It contains one or several tasks inside it.\n    Each task should be a 'functools.partial'.\n    'Partial' is like a zip with a target function and arguments together.\n\n    Attributes\n    ----------\n    all_id : dict\n        contains already used identifiers and their total number\n    __max_id_length : int\n        the max length of identifier (also 2 digits will be added like '_01').\n    __tick : float\n        something like 'a frequency' of the whole project in seconds\n    \"\"\"\n    all_id: Dict[str, int] = {}\n\n    config = ConfigParser()\n    config.read('setup.cfg')\n    __max_id_length = float(config['job']['max_id_length'])\n    __tick = float(config['scheduler']['tick'])\n\n    def __init__(self, targets: list[partial],\n                 start_at: str = \"\",\n                 max_working_time: int = -1,\n                 tries: int = 0,\n                 dependencies: tuple[str, ...] = tuple()):\n        self.__targets = targets\n        self.start_at = start_at\n        self.max_working_time = max_working_time\n        self.tries = tries\n        self.dependencies = dependencies\n        self.loop: Any = None  # main coroutine of this class\n\n        name = ''\n        for target in targets:\n            name += target.func.__name__\n            if len(name) &gt; Job.__max_id_length:\n                break\n\n        if name in Job.all_id.keys():\n            Job.all_id[name] += 1\n        else:\n            Job.all_id[name] = 1\n        logger.debug(f\"all_id dictionary: {Job.all_id}\")\n\n        siblings = Job.all_id[name]  # other jobs which have the same basic name\n        zero = '0' if siblings &lt; 10 else ''\n        self.__id = name + '_' + zero + str(siblings)\n\n    def get_id(self) -&gt; str:\n        \"\"\"Return identifier of a Job.\"\"\"\n        return self.__id\n\n    @staticmethod\n    def target_and_queue(target: Callable, queue: Queue) -&gt; None:\n        \"\"\"Wrap a function into another function and put a result in a queue.\"\"\"\n        result = str(target())\n        queue.put(result)\n        logger.debug(f'Result {result} is put in the queue')\n\n    def run(self) -&gt; None:\n        \"\"\"Start a coroutine. It's being called just one time during a life of Job object.\"\"\"\n        self.loop = self.start_loop()\n\n    def start_loop(self) -&gt; Generator[Response | None, Request, None]:\n        \"\"\"\n        Return main coroutine of the whole class.\n\n        target is functools.partial(func, arg1, arg2 ...)\n\n        Returns\n        -------\n        coroutine\n            a coroutine.\n        \"\"\"\n        yield None\n        for i, target in enumerate(self.__targets):\n            # Job do tasks one after another. Not in parallel\n            queue: Queue = Queue()\n            func = partial(Job.target_and_queue, target, queue)\n            process = Process(target=func)\n            process.start()\n\n            while True:\n                request = yield None\n                logger.debug(f\"Job got request '{request.value}'\")\n                sleep(3 * Job.__tick)\n\n                response: None | Response = None\n                if request != Request.report_status:\n                    response = Response(ResponseStatus.error, None)\n                    logger.debug(\"Unknown type of request\")\n                    yield response\n                    continue\n\n                if process.is_alive():\n                    response = Response(ResponseStatus.waiting, None)\n                    logger.debug(f\"Job returns status '{ResponseStatus.waiting.value}'\")\n                    yield response\n                    continue\n\n                result = None if queue.empty() else queue.get()\n                logger.debug(f'{self.__id}: Result {result} is taken from the queue')\n                response = Response(ResponseStatus.result, {i: result})\n                yield response\n                break\n        yield None\n        response = Response(ResponseStatus.finish, None)\n        yield response\n\n    def pause(self) -&gt; None:\n        \"\"\"Pause a job.\"\"\"\n        ...\n\n    def stop(self) -&gt; None:\n        \"\"\"Stop a job.\"\"\"\n        ...\n\n    def __repr__(self, ready: bool = True) -&gt; list[str]:\n        \"\"\"return itself for writing in CSV spreadsheet.\n        Order is according to 'header' in 'scheduler'\n        \"\"\"\n        # the same 'PROGRESS' status for all cases except for 'READY' status\n        status = 'READY' if ready else 'PROGRESS'\n        row = [self.__id,\n               status,\n               self.start_at if self.start_at else 'ASAP',\n               self.max_working_time,\n               self.tries,  # it should contain only tries left\n               self.dependencies,\n               'pickled stub',\n               ]\n        for i, item in enumerate(row):\n            token = str(item)\n            token.replace('\\t', '    ')\n            row[i] = token if token else 'ERROR'\n        return row\n</code></pre>"},{"location":"job/#job.Job.__repr__","title":"<code>__repr__(ready=True)</code>","text":"<p>return itself for writing in CSV spreadsheet. Order is according to 'header' in 'scheduler'</p> Source code in <code>job.py</code> <pre><code>def __repr__(self, ready: bool = True) -&gt; list[str]:\n    \"\"\"return itself for writing in CSV spreadsheet.\n    Order is according to 'header' in 'scheduler'\n    \"\"\"\n    # the same 'PROGRESS' status for all cases except for 'READY' status\n    status = 'READY' if ready else 'PROGRESS'\n    row = [self.__id,\n           status,\n           self.start_at if self.start_at else 'ASAP',\n           self.max_working_time,\n           self.tries,  # it should contain only tries left\n           self.dependencies,\n           'pickled stub',\n           ]\n    for i, item in enumerate(row):\n        token = str(item)\n        token.replace('\\t', '    ')\n        row[i] = token if token else 'ERROR'\n    return row\n</code></pre>"},{"location":"job/#job.Job.get_id","title":"<code>get_id()</code>","text":"<p>Return identifier of a Job.</p> Source code in <code>job.py</code> <pre><code>def get_id(self) -&gt; str:\n    \"\"\"Return identifier of a Job.\"\"\"\n    return self.__id\n</code></pre>"},{"location":"job/#job.Job.pause","title":"<code>pause()</code>","text":"<p>Pause a job.</p> Source code in <code>job.py</code> <pre><code>def pause(self) -&gt; None:\n    \"\"\"Pause a job.\"\"\"\n    ...\n</code></pre>"},{"location":"job/#job.Job.run","title":"<code>run()</code>","text":"<p>Start a coroutine. It's being called just one time during a life of Job object.</p> Source code in <code>job.py</code> <pre><code>def run(self) -&gt; None:\n    \"\"\"Start a coroutine. It's being called just one time during a life of Job object.\"\"\"\n    self.loop = self.start_loop()\n</code></pre>"},{"location":"job/#job.Job.start_loop","title":"<code>start_loop()</code>","text":"<p>Return main coroutine of the whole class.</p> <p>target is functools.partial(func, arg1, arg2 ...)</p> <p>Returns:</p> Type Description <code>coroutine</code> <p>a coroutine.</p> Source code in <code>job.py</code> <pre><code>def start_loop(self) -&gt; Generator[Response | None, Request, None]:\n    \"\"\"\n    Return main coroutine of the whole class.\n\n    target is functools.partial(func, arg1, arg2 ...)\n\n    Returns\n    -------\n    coroutine\n        a coroutine.\n    \"\"\"\n    yield None\n    for i, target in enumerate(self.__targets):\n        # Job do tasks one after another. Not in parallel\n        queue: Queue = Queue()\n        func = partial(Job.target_and_queue, target, queue)\n        process = Process(target=func)\n        process.start()\n\n        while True:\n            request = yield None\n            logger.debug(f\"Job got request '{request.value}'\")\n            sleep(3 * Job.__tick)\n\n            response: None | Response = None\n            if request != Request.report_status:\n                response = Response(ResponseStatus.error, None)\n                logger.debug(\"Unknown type of request\")\n                yield response\n                continue\n\n            if process.is_alive():\n                response = Response(ResponseStatus.waiting, None)\n                logger.debug(f\"Job returns status '{ResponseStatus.waiting.value}'\")\n                yield response\n                continue\n\n            result = None if queue.empty() else queue.get()\n            logger.debug(f'{self.__id}: Result {result} is taken from the queue')\n            response = Response(ResponseStatus.result, {i: result})\n            yield response\n            break\n    yield None\n    response = Response(ResponseStatus.finish, None)\n    yield response\n</code></pre>"},{"location":"job/#job.Job.stop","title":"<code>stop()</code>","text":"<p>Stop a job.</p> Source code in <code>job.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop a job.\"\"\"\n    ...\n</code></pre>"},{"location":"job/#job.Job.target_and_queue","title":"<code>target_and_queue(target, queue)</code>  <code>staticmethod</code>","text":"<p>Wrap a function into another function and put a result in a queue.</p> Source code in <code>job.py</code> <pre><code>@staticmethod\ndef target_and_queue(target: Callable, queue: Queue) -&gt; None:\n    \"\"\"Wrap a function into another function and put a result in a queue.\"\"\"\n    result = str(target())\n    queue.put(result)\n    logger.debug(f'Result {result} is put in the queue')\n</code></pre>"},{"location":"mkdocs-basics/","title":"\u041e MkDocs","text":"<p>\u042d\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0430 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0430 MkDocs.</p>"},{"location":"mkdocs-basics/#_1","title":"\u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b","text":"<p>\u0427\u0442\u043e\u0431\u044b \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f IDE \u0438\u043b\u0438 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b</p> <pre><code>mkdocs serve\n</code></pre> <p>\u041f\u0435\u0440\u0435\u0441\u043e\u0431\u0440\u0430\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0441\u0430\u0439\u0442 (\u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 \u043f\u0430\u043f\u043a\u0435 site).  \u041d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0443 \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437, \u043d\u043e \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043f\u0435\u0440\u0435\u0441\u0431\u043e\u0440\u043a\u0438.</p> <pre><code>mkdocs build\n</code></pre> <p>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043d\u0430 \u0433\u0438\u0442\u0445\u0430\u0431\u0435 (\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u043d\u043e\u0432\u043b\u0451\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0443\u0436\u0435 \u0431\u044b\u043b\u0438 \u043d\u0430 \u0433\u0438\u0442\u0445\u0430\u0431\u0435 \u0445\u043e\u0442\u044c \u043d\u0430 \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u0432\u0435\u0442\u043a\u0435).</p> <pre><code>mkdocs gh-deploy\n</code></pre>"},{"location":"mkdocs-basics/#mkdocs_1","title":"\u0417\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0438 \u043f\u0430\u043f\u043a\u0438 \u043f\u043e\u0434 mkdocs","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\nsite/\n    ...       # \u0421\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0441\u0430\u0439\u0442\n</code></pre>"},{"location":"mkdocs-basics/#mkdocs_2","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e mkdocs","text":"<p>\u041a\u0440\u0430\u0442\u043a\u0430\u044f \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e mkdocs</p> <pre><code>mkdocs -h\n</code></pre> <p>\u041f\u043e\u043b\u0435\u0437\u043d\u0430\u044f \u0441\u0442\u0430\u0442\u044c\u044f \u0441\u043e \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0430 mkdocs:</p> <pre><code>open https://realpython.com/python-project-documentation-with-mkdocs/\n</code></pre> <p>\u0411\u043e\u043b\u044c\u0448\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 - \u043d\u0430 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c \u0441\u0430\u0439\u0442\u0435</p> <pre><code>open https://www.mkdocs.org\n</code></pre>"},{"location":"scheduler/","title":"class Scheduler (\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0449\u0438\u043a)","text":""},{"location":"scheduler/#scheduler.Scheduler","title":"<code>Scheduler</code>","text":"<p>The 'official' simple wrap for the class _Scheduler</p> Source code in <code>scheduler.py</code> <pre><code>class Scheduler:\n    \"\"\"\n    The 'official' simple wrap for the class _Scheduler\n    \"\"\"\n    def __init__(self, pool_size: int = 10) -&gt; None:\n        config = ConfigParser()\n        config.read('setup.cfg')\n        self.__tick = float(config['scheduler']['tick'])\n\n        self.scheduler = _Scheduler(pool_size=pool_size, tick=self.__tick)\n        self.process = None\n        self.queue = None\n\n    def schedule(self, job: Job) -&gt; None:\n        \"\"\"Add a job in the list of pending jobs.\"\"\"\n        self.scheduler.schedule(job)\n\n    def run(self) -&gt; None:\n        scheduler = self.scheduler\n        self.queue = Queue()\n        queue = self.queue\n        self.process = Process(target=scheduler.run, args=(queue,))\n        self.process.start()\n        # sleep(10 * self.__tick)\n        # self.process.join()\n\n    def stop(self) -&gt; None:\n        logger.debug(\"Scheduler.stop is called\")\n        self.queue.put('stop')\n</code></pre>"},{"location":"scheduler/#scheduler.Scheduler.schedule","title":"<code>schedule(job)</code>","text":"<p>Add a job in the list of pending jobs.</p> Source code in <code>scheduler.py</code> <pre><code>def schedule(self, job: Job) -&gt; None:\n    \"\"\"Add a job in the list of pending jobs.\"\"\"\n    self.scheduler.schedule(job)\n</code></pre>"},{"location":"tests/","title":"\u0422\u0435\u0441\u0442\u044b","text":"<p>\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043b\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432</p> <p>The main file for tests.</p>"},{"location":"tests/#tests.test_integration.test_3jobs","title":"<code>test_3jobs(fixture_for_power)</code>","text":"<p>Test \"three jobs for one scheduler\"</p> <p>Parameters:</p> Name Type Description Default <code>fixture_for_power</code> <code>fixture</code> <p>a fixture with variables for power function a**b</p> required Source code in <code>tests/test_integration.py</code> <pre><code>def test_3jobs(fixture_for_power: tuple) -&gt; None:\n    \"\"\"\n    Test \"three jobs for one scheduler\"\n\n    Parameters\n    ----------\n    fixture_for_power : fixture\n        a fixture with variables for power function a**b\n    \"\"\"\n    tuples = fixture_for_power\n\n    jobs = [Job([partial(power, *args_), ]) for args_ in tuples]\n    scheduler = Scheduler()\n\n    for job in jobs:\n        assert isinstance(job, Job)\n        scheduler.schedule(job)\n\n    scheduler.run()\n</code></pre>"},{"location":"tests/#tests.test_integration.test_a_stop","title":"<code>test_a_stop(fixture_for_power)</code>","text":"<p>Test \"three jobs for one scheduler\"</p> <p>Parameters:</p> Name Type Description Default <code>fixture_for_power</code> <code>fixture</code> <p>a fixture with variables for power function a**b</p> required Source code in <code>tests/test_integration.py</code> <pre><code>def test_a_stop(fixture_for_power: tuple) -&gt; None:\n    \"\"\"\n    Test \"three jobs for one scheduler\"\n\n    Parameters\n    ----------\n    fixture_for_power : fixture\n        a fixture with variables for power function a**b\n    \"\"\"\n    tuples = fixture_for_power\n\n    jobs = [Job([partial(power, *args_)]) for args_ in tuples]\n    scheduler = Scheduler()\n\n    for job in jobs:\n        scheduler.schedule(job)\n\n    scheduler.run()\n    sleep(3*TICK)\n    scheduler.stop()\n</code></pre>"}]}